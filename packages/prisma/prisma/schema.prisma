// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

enum UserType {
  Parent
  Child
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String?
  address   String   @unique
  newUser   Boolean  @default(true)

  email         String?   @unique
  emailVerified DateTime?

  type   UserType
  parent Parent?
  child  Child?
}

model Parent {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id @unique

  ramp     Ramp[]
  children Child[]
}

model Child {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id @unique

  status     ChildStatus @default(INVITED)
  activities Activity[]

  parent       Parent @relation(fields: [parentUserId], references: [userId])
  parentUserId String
}

// User Parent Ramp

model Ramp {
  id           Int        @id @default(autoincrement())
  rampId       String     @unique
  createdAt    DateTime   @default(now())
  cryptoAmount String
  cryptoAsset  String
  fiatValue    Float
  fiatCurrency String
  appliedFee   Float
  status       RampStatus
  userParent   Parent     @relation(fields: [userParentId], references: [userId])
  userParentId String
}

enum RampStatus {
  CREATED
  RELEASED
  RETURNED
  ERROR
}

// Authentication Account

model Account {
  id                String     @id @default(cuid())
  type              AuthType
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  password          String?
  expiresAt         Int?
  tokenType         TokenType?
  scope             String?
}

model Activity {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  fromAddress   String
  toAddress     String?
  child         Child[]
  blockNum      String
  hash          String
  category      String
  value         String
  asset         String?
  erc721TokenId String?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum ChildStatus {
  INVITED
  LINKED
  PENDING
  ACTIVE
  LOCKED
}

// Verification Token

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Survey ?

model Survey {
  id              String   @id @default(cuid())
  cryptoKnowledge String?
  childKnowledge  String?
  childPlayToEarn String?
  gavePocketMoney String?
  contact         String?
  email           String   @unique
  createdAt       DateTime @default(now())
}

// Auth Enums

enum AuthType {
  oauth
  credentials
}

enum TokenType {
  Bearer
}
