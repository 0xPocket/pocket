// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

enum UserType {
  Parent
  Child
}

enum AccountType {
  Magic
  Ethereum
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String?
  address   String?  @unique
  newUser   Boolean  @default(true)

  accountType   AccountType @default(Ethereum)
  email         String?     @unique
  emailVerified DateTime?

  type        UserType
  parent      Parent?
  child       Child?
  maticGrants MaticGrant[]
  BugReport   Ticket[]
  Contact     Contact[]
}

model Parent {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id @unique

  maticGrants Int     @default(0)
  ramp        Ramp[]
  children    Child[]
}

enum ChildStatus {
  INVITED
  ACTIVE
}

model Child {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id @unique

  status     ChildStatus @default(INVITED)
  activities Activity[]

  parent       Parent @relation(fields: [parentUserId], references: [userId])
  parentUserId String
}

// Matic Grant

model MaticGrant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  amount    String
  hash      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// User Parent Ramp

enum RampStatus {
  CREATED
  RELEASED
  RETURNED
  ERROR
}

model Ramp {
  id           Int        @id @default(autoincrement())
  rampId       String     @unique
  createdAt    DateTime   @default(now())
  cryptoAmount String
  cryptoAsset  String
  fiatValue    Float
  fiatCurrency String
  appliedFee   Float
  status       RampStatus
  userParent   Parent     @relation(fields: [userParentId], references: [userId])
  userParentId String
}

// Authentication Account

model Activity {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  fromAddress   String
  toAddress     String?
  child         Child[]
  blockNum      String
  hash          String
  category      String
  value         String
  asset         String?
  erc721TokenId String?
}

// Verification Token

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlacklistToken {
  address  String  @id @unique
  verified Boolean @default(true)
}

// FORMS

model Ticket {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  fromURL   String
  subject   String?
  desc      String
  resolved  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  email     String
  subject   String?
  desc      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

// Survey ?

model Survey {
  id              String   @id @default(cuid())
  cryptoKnowledge String?
  childKnowledge  String?
  childPlayToEarn String?
  gavePocketMoney String?
  contact         String?
  email           String   @unique
  createdAt       DateTime @default(now())
}
