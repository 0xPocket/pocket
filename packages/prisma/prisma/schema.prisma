// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

model UserParent {
  id            String            @id @default(cuid())
  firstName     String
  lastName      String
  email         String            @unique
  emailVerified DateTime?
  account       Account?
  children      UserChild[]
  wallet        UserParentWallet?
}

model UserChild {
  id           String       @id @default(cuid())
  firstName    String
  lastName     String
  username     String?      @unique
  email        String       @unique
  status       ChildStatus  @default(INVITED)
  web3Account  Web3Account?
  userParent   UserParent   @relation(fields: [userParentId], references: [id])
  userParentId String
}

// Wallet

model UserParentWallet {
  id                  String     @id @default(cuid())
  publicKey           String
  encryptedPrivateKey String?
  userParent          UserParent @relation(fields: [userParentId], references: [id])
  userParentId        String     @unique
}

// Authentication Account

model Web3Account {
  id      String    @id @default(cuid())
  address String    @unique
  nonce   String
  user    UserChild @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String    @unique
}

model Account {
  id                String     @id @default(cuid())
  type              AuthType
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  password          String?
  expiresAt         Int?
  tokenType         TokenType?
  scope             String?
  user              UserParent @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String     @unique
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum ChildStatus {
  INVITED
  LINKED
  PENDING
  ACTIVE
  LOCKED
}

// Survey ?

model Survey {
  id              String   @id @default(cuid())
  cryptoKnowledge String?
  childKnowledge  String?
  email           String   @unique
  createdAt       DateTime @default(now())
}

// Auth Enums

enum AuthType {
  oauth
  credentials
}

enum TokenType {
  Bearer
}
