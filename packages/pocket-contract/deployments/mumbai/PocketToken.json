{
  "address": "0x118b169f4b94b3069CD5F7997DF6773F577B8e11",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRescuer",
          "type": "address"
        }
      ],
      "name": "RescuerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLACKLISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CANCEL_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "META_TRANSACTION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESCUER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "approveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "enum GasAbstraction.AuthorizationState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blacklisters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "decreaseAllowanceWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "increaseAllowanceWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "newDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "childChainManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescuers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "withdrawWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f57071beb2e2f9b0b4146f3f4d6197e8ab2d668cc2056d44f5defcbdcc7a28a",
  "receipt": {
    "to": null,
    "from": "0xAfa6497c3741D8672e74b0f69d5B5937a385b8ae",
    "contractAddress": "0x118b169f4b94b3069CD5F7997DF6773F577B8e11",
    "transactionIndex": 1,
    "gasUsed": "3889871",
    "logsBloom": "0x
    "blockHash": "0x99725b3171cd0f34c3bdd0e33940b186eaf71a892402df7f0e1e1138062adcc5",
    "transactionHash": "0x6f57071beb2e2f9b0b4146f3f4d6197e8ab2d668cc2056d44f5defcbdcc7a28a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28464613,
        "transactionHash": "0x6f57071beb2e2f9b0b4146f3f4d6197e8ab2d668cc2056d44f5defcbdcc7a28a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000afa6497c3741d8672e74b0f69d5b5937a385b8ae",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000228c8aebb2468410000000000000000000000000000000000000000000000004c68b3d7f41ac0f400000000000000000000000000000000000000000000160d919a7c4a09e4062d0000000000000000000000000000000000000000000000004a3feb2938f658b300000000000000000000000000000000000000000000160d93c344f8c5086e6e",
        "logIndex": 2,
        "blockHash": "0x99725b3171cd0f34c3bdd0e33940b186eaf71a892402df7f0e1e1138062adcc5"
      }
    ],
    "blockNumber": 28464613,
    "cumulativeGasUsed": "4066521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "05224f35d6ab83f52050833d7152b987",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLACKLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"META_TRANSACTION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESCUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"approveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"enum GasAbstraction.AuthorizationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"decreaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"increaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"newDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount of allowance\"}},\"authorizationState(address,bytes32)\":{\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\"},\"returns\":{\"_0\":\"Authorization state\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"blacklist(address)\":{\"details\":\"Adds an account to the blacklist\",\"params\":{\"account\":\"The address to blacklist\"}},\"blacklisters()\":{\"returns\":{\"_0\":\"Addresses\"}},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Works only if the authorization is not yet used.\",\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"v\":\"v of the signature\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"decrement\":\"Amount of decrease in allowance\",\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\"}},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required amount for user Make sure minting is done only by this function\",\"params\":{\"depositData\":\"abi encoded amount\",\"user\":\"user address for whom deposit is being done\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"increment\":\"Amount of increase in allowance\",\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\"}},\"initialize(string,string,uint8,address)\":{\"details\":\"meant to be called once immediately after deployment\"},\"isBlacklisted(address)\":{\"details\":\"Checks if an account is blacklisted\",\"params\":{\"account\":\"The address to check\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"params\":{\"owner\":\"Token owner's address\"},\"returns\":{\"_0\":\"Next nonce\"}},\"paused()\":{\"returns\":{\"_0\":\"True if paused\"}},\"pausers()\":{\"returns\":{\"_0\":\"Addresses\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"Expiration time, seconds since the epoch\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"value\":\"Amount of allowance\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"rescueERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Recipient address\",\"tokenContract\":\"ERC20 token contract address\"}},\"rescuers()\":{\"returns\":{\"_0\":\"Addresses\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"unBlacklist(address)\":{\"params\":{\"account\":\"The address to remove from the blacklist\"}},\"withdraw(uint256)\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"amount\":\"amount of tokens to withdraw\"}},\"withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Update allowance with a signed authorization\"},\"authorizationState(address,bytes32)\":{\"notice\":\"Returns the state of an authorization\"},\"blacklisters()\":{\"notice\":\"Return the members of the blacklister role\"},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Attempt to cancel an authorization\"},\"decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Decrease allowance with a signed authorization\"},\"deposit(address,bytes)\":{\"notice\":\"called when token is deposited on root chain\"},\"increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Increase allowance with a signed authorization\"},\"initialize(string,string,uint8,address)\":{\"notice\":\"Initialize the contract after it has been proxified\"},\"nonces(address)\":{\"notice\":\"Nonces for permit / meta-transactions\"},\"pause()\":{\"notice\":\"Pause this contract\"},\"paused()\":{\"notice\":\"Returns whether this contract is paused\"},\"pausers()\":{\"notice\":\"Return the members of the pauser role\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Update allowance with a signed permit\"},\"rescueERC20(address,address,uint256)\":{\"notice\":\"Rescue ERC20 tokens locked up in this contract.\"},\"rescuers()\":{\"notice\":\"Return the members of the rescuer role\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a transfer with a signed authorization\"},\"unBlacklist(address)\":{\"notice\":\"Removes an account from the blacklist\"},\"unpause()\":{\"notice\":\"Unpause this contract\"},\"withdraw(uint256)\":{\"notice\":\"called when user wants to withdraw tokens back to root chain\"},\"withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a withdrawal with a signed authorization. This is used to transfer tokens back to the root chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PocketToken.sol\":\"PocketToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PocketToken.sol\":{\"content\":\"/**\\n *Submitted for verification at polygonscan.com on 2021-06-09\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal virtual view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal virtual view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-block.timestamp/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{\\n            value: weiValue\\n        }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/IERC20Internal.sol\\n\\n\\n\\nabstract contract IERC20Internal {\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 increment\\n    ) internal virtual;\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 decrement\\n    ) internal virtual;\\n\\n    function _mint(address account, uint256 amount) internal virtual;\\n\\n    function _burn(address account, uint256 amount) internal virtual;\\n}\\n\\n// File: contracts/lib/ERC20.sol\\n\\n/**\\n * Copyright (c) 2016-2020 zOS Global Limited\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining\\n * a copy of this software and associated documentation files (the\\n * \\\"Software\\\"), to deal in the Software without restriction, including\\n * without limitation the rights to use, copy, modify, merge, publish,\\n * distribute, sublicense, and/or sell copies of the Software, and to\\n * permit persons to whom the Software is furnished to do so, subject to\\n * the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included\\n * in all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n */\\n\\n\\n\\n/**\\n * @dev openzeppelin Implementation of the {IERC20} interface.\\n *\\n * Modified to add setters for name, symbol and decimals. This was needed\\n * because\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-kblock.timestampn issues around setting\\n * allowances. See {IERC20-approve}.\\n *\\n * Modifications made:\\n * - Setters for name, symbol, and decimals\\n * - Internal _transferFrom, _increaseAllowance, and _decreaseAllowance\\n * - Conform to IERC20Internal interface\\n * - Changed visibility of public functions to external\\n */\\ncontract ERC20 is Context, IERC20, IERC20Internal {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = \\\"PocketToken\\\";\\n        _symbol = \\\"PKT\\\";\\n        _decimals = 6;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n    }\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 addedValue\\n    ) internal virtual override {\\n        _approve(owner, spender, _allowances[owner][spender].add(addedValue));\\n    }\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 subtractedValue\\n    ) internal virtual override {\\n        _approve(\\n            owner,\\n            spender,\\n            _allowances[owner][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\n\\n\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n\\n        bytes32 b = bytes32(uint256(uint160(address(value))));\\n        // return b;\\n        return _add(set._inner, b);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 b = bytes32(uint256(uint160(address(value))));\\n\\n        return _remove(set._inner, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 b = bytes32(uint256(uint160(address(value))));\\n\\n        return _contains(set._inner, b);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint(bytes32(_at(set._inner, index)))));\\n        // return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/AccessControl.sol\\n\\n\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, _msgSender()),\\n            \\\"AccessControl: sender must be an admin to grant\\\"\\n        );\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, _msgSender()),\\n            \\\"AccessControl: sender must be an admin to revoke\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/AccessControlMixin.sol\\n\\n\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(\\n            abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\")\\n        );\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(hasRole(role, _msgSender()), _revertMsg);\\n        _;\\n    }\\n}\\n\\n// File: contracts/lib/IChildToken.sol\\n\\n\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\\n// File: contracts/lib/Initializable.sol\\n\\n\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\\n\\n// File: contracts/lib/ECRecover.sol\\n\\n/**\\n * Copyright (c) 2016-2019 zOS Global Limited\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\n\\n\\n/**\\n * @title ECRecover\\n * @notice A library that provides a safe ECDSA recovery function\\n */\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(\\n        bytes32 digest,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n}\\n\\n// File: contracts/lib/EIP712.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\n\\n\\n/**\\n * @title EIP712\\n * @notice A library that provides EIP712 helper functions\\n */\\nlibrary EIP712 {\\n    // keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\")\\n    bytes32\\n        public constant EIP712_DOMAIN_TYPEHASH = 0x36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7;\\n\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(string memory name, string memory version)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    address(this),\\n                    bytes32(chainId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Recover signer's address from a EIP712 signature\\n     * @param domainSeparator   Domain separator\\n     * @param v                 v of the signature\\n     * @param r                 r of the signature\\n     * @param s                 s of the signature\\n     * @param typeHashAndData   Type hash concatenated with data\\n     * @return Signer's address\\n     */\\n    function recover(\\n        bytes32 domainSeparator,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes memory typeHashAndData\\n    ) internal pure returns (address) {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(typeHashAndData)\\n            )\\n        );\\n        return ECRecover.recover(digest, v, r, s);\\n    }\\n}\\n\\n// File: contracts/lib/EIP712Domain.sol\\n\\n\\n\\nabstract contract EIP712Domain {\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    function _setDomainSeparator(string memory name, string memory version)\\n        internal\\n    {\\n        DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(name, version);\\n    }\\n}\\n\\n// File: contracts/lib/Nonces.sol\\n\\n\\n\\nabstract contract Nonces {\\n    mapping(address => uint256) internal _nonces;\\n\\n    /**\\n     * @notice Nonces for permit / meta-transactions\\n     * @param owner Token owner's address\\n     * @return Next nonce\\n     */\\n    function nonces(address owner) external view returns (uint256) {\\n        return _nonces[owner];\\n    }\\n}\\n\\n// File: contracts/lib/NativeMetaTransaction.sol\\n\\n\\n\\nabstract contract NativeMetaTransaction is EIP712Domain, Nonces {\\n    // keccak256(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\")\\n    bytes32\\n        public constant META_TRANSACTION_TYPEHASH = 0x23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e653;\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: _nonces[userAddress]++,\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            _verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function _verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n\\n        bytes memory data = abi.encode(\\n            META_TRANSACTION_TYPEHASH,\\n            metaTx.nonce,\\n            metaTx.from,\\n            keccak256(metaTx.functionSignature)\\n        );\\n\\n        return\\n            EIP712.recover(DOMAIN_SEPARATOR, sigV, sigR, sigS, data) == signer;\\n    }\\n}\\n\\n// File: contracts/lib/ContextMixin.sol\\n\\n\\n\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\\n\\n// File: contracts/lib/Permit.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\n\\n\\nabstract contract Permit is IERC20Internal, EIP712Domain, Nonces {\\n    // = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32\\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @param owner     Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param value     Amount of allowance\\n     * @param deadline  The time at which this expires (unix time)\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(msg.sender != address(this), \\\"Caller is this contract\\\");\\n        require(deadline >= block.timestamp, \\\"Permit: permit is expired\\\");\\n\\n        bytes memory data = abi.encode(\\n            PERMIT_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            _nonces[owner]++,\\n            deadline\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"Permit: invalid signature\\\"\\n        );\\n\\n        _approve(owner, spender, value);\\n    }\\n}\\n\\n// File: contracts/lib/GasAbstraction.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\n\\n\\n/**\\n * @title Gas Abstraction\\n * @notice Provide internal implementation for gas-abstracted transfers and\\n * approvals\\n * @dev Contracts that inherit from this must wrap these with publicly\\n * accessible functions, optionally adding modifiers where necessary\\n */\\nabstract contract GasAbstraction is IERC20Internal, EIP712Domain {\\n    bytes32\\n        public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n    // = keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant APPROVE_WITH_AUTHORIZATION_TYPEHASH = 0x808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c;\\n    // = keccak256(\\\"ApproveWithAuthorization(address owner,address spender,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0x424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a;\\n    // = keccak256(\\\"IncreaseAllowanceWithAuthorization(address owner,address spender,uint256 increment,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0xb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8;\\n    // = keccak256(\\\"DecreaseAllowanceWithAuthorization(address owner,address spender,uint256 decrement,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n    // = keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n\\n    enum AuthorizationState { Unused, Used, Canceled }\\n\\n    /**\\n     * @dev authorizer address => nonce => authorization state\\n     */\\n    mapping(address => mapping(bytes32 => AuthorizationState))\\n        private _authorizationStates;\\n\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n    event AuthorizationCanceled(\\n        address indexed authorizer,\\n        bytes32 indexed nonce\\n    );\\n\\n    /**\\n     * @notice Returns the state of an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @return Authorization state\\n     */\\n    function authorizationState(address authorizer, bytes32 nonce)\\n        external\\n        view\\n        returns (AuthorizationState)\\n    {\\n        return _authorizationStates[authorizer][nonce];\\n    }\\n\\n    /**\\n     * @notice Verify a signed transfer authorization and execute if valid\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Verify a signed authorization for an increase in the allowance\\n     * granted to the spender and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param increment     Amount of increase in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _increaseAllowance(owner, spender, increment);\\n    }\\n\\n    /**\\n     * @notice Verify a signed authorization for a decrease in the allowance\\n     * granted to the spender and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param decrement     Amount of decrease in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _decreaseAllowance(owner, spender, decrement);\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval authorization and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param value         Amount of allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            APPROVE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireUnusedAuthorization(authorizer, nonce);\\n\\n        bytes memory data = abi.encode(\\n            CANCEL_AUTHORIZATION_TYPEHASH,\\n            authorizer,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == authorizer,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _authorizationStates[authorizer][nonce] = AuthorizationState.Canceled;\\n        emit AuthorizationCanceled(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Check that an authorization is unused\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce)\\n        private\\n        view\\n    {\\n        require(\\n            _authorizationStates[authorizer][nonce] ==\\n                AuthorizationState.Unused,\\n            \\\"GasAbstraction: authorization is used or canceled\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that authorization is valid\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     */\\n    function _requireValidAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint256 validAfter,\\n        uint256 validBefore\\n    ) internal view {\\n        require(\\n            block.timestamp > validAfter,\\n            \\\"GasAbstraction: authorization is not yet valid\\\"\\n        );\\n        require(block.timestamp < validBefore, \\\"GasAbstraction: authorization is expired\\\");\\n        _requireUnusedAuthorization(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Mark an authorization as used\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce)\\n        internal\\n    {\\n        _authorizationStates[authorizer][nonce] = AuthorizationState.Used;\\n        emit AuthorizationUsed(authorizer, nonce);\\n    }\\n}\\n\\n// File: contracts/lib/MaticGasAbstraction.sol\\n\\n\\n\\nabstract contract MaticGasAbstraction is GasAbstraction {\\n    // keccak256(\\\"WithdrawWithAuthorization(address owner,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant WITHDRAW_WITH_AUTHORIZATION_TYPEHASH = 0x6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f9;\\n\\n    function _withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            WITHDRAW_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _burn(owner, value);\\n    }\\n}\\n\\n// File: contracts/UChildERC20.sol\\n\\n\\n\\ncontract UChildERC20 is\\n    ERC20,\\n    IChildToken,\\n    AccessControlMixin,\\n    Initializable,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    Permit,\\n    MaticGasAbstraction\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n    string public constant EIP712_VERSION = \\\"1\\\";\\n\\n    constructor() public ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    /**\\n     * @notice Initialize the contract after it has been proxified\\n     * @dev meant to be called once immediately after deployment\\n     */\\n    function initialize(\\n        string calldata newName,\\n        string calldata newSymbol,\\n        uint8 newDecimals,\\n        address childChainManager\\n    ) external initializer {\\n        _setName(newName);\\n        _setSymbol(newSymbol);\\n        _setDecimals(newDecimals);\\n        _setupContractId(string(abi.encodePacked(\\\"Child\\\", newSymbol)));\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _setDomainSeparator(newName, EIP712_VERSION);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        virtual\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    function updateMetadata(string calldata newName, string calldata newSymbol)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _setName(newName);\\n        _setSymbol(newSymbol);\\n        _setDomainSeparator(newName, EIP712_VERSION);\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    Expiration time, seconds since the epoch\\n     * @param v           v of the signature\\n     * @param r           r of the signature\\n     * @param s           s of the signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param value         Amount of allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _approveWithAuthorization(\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param increment     Amount of increase in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _increaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Decrease allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param decrement     Amount of decrease in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _decreaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute a withdrawal with a signed authorization. This is used to\\n     * transfer tokens back to the root chain.\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param value         Amount to be withdrawn\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _withdrawWithAuthorization(\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Blacklistable.sol\\n\\n\\n\\nabstract contract Blacklistable is AccessControlMixin {\\n    bytes32 public constant BLACKLISTER_ROLE = keccak256(\\\"BLACKLISTER_ROLE\\\");\\n\\n    mapping(address => bool) internal _blacklisted;\\n\\n    event Blacklisted(address indexed account);\\n    event UnBlacklisted(address indexed account);\\n\\n    /**\\n     * @dev Throws if the given account is blacklisted\\n     * @param account The address to check\\n     */\\n    modifier notBlacklisted(address account) {\\n        require(\\n            !_blacklisted[account],\\n            \\\"Blacklistable: account is blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Return the members of the blacklister role\\n     * @return Addresses\\n     */\\n    function blacklisters() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(BLACKLISTER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(BLACKLISTER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @dev Checks if an account is blacklisted\\n     * @param account The address to check\\n     */\\n    function isBlacklisted(address account) external view returns (bool) {\\n        return _blacklisted[account];\\n    }\\n\\n    /**\\n     * @dev Adds an account to the blacklist\\n     * @param account The address to blacklist\\n     */\\n    function blacklist(address account) external only(BLACKLISTER_ROLE) {\\n        _blacklisted[account] = true;\\n        emit Blacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Removes an account from the blacklist\\n     * @param account The address to remove from the blacklist\\n     */\\n    function unBlacklist(address account) external only(BLACKLISTER_ROLE) {\\n        _blacklisted[account] = false;\\n        emit UnBlacklisted(account);\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Pausable.sol\\n\\n\\n\\nabstract contract Pausable is AccessControlMixin {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    event Pause();\\n    event Unpause();\\n\\n    bool internal _paused = false;\\n\\n    /**\\n     * @notice Throws if this contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Return the members of the pauser role\\n     * @return Addresses\\n     */\\n    function pausers() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(PAUSER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(PAUSER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Returns whether this contract is paused\\n     * @return True if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Pause this contract\\n     */\\n    function pause() external only(PAUSER_ROLE) {\\n        _paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Unpause this contract\\n     */\\n    function unpause() external only(PAUSER_ROLE) {\\n        _paused = false;\\n        emit Unpause();\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Rescuable.sol\\n\\n\\n\\nabstract contract Rescuable is AccessControlMixin {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant RESCUER_ROLE = keccak256(\\\"RESCUER_ROLE\\\");\\n\\n    event RescuerChanged(address indexed newRescuer);\\n\\n    /**\\n     * @notice Return the members of the rescuer role\\n     * @return Addresses\\n     */\\n    function rescuers() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(RESCUER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(RESCUER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to withdraw\\n     */\\n    function rescueERC20(\\n        IERC20 tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external only(RESCUER_ROLE) {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n}\\n\\n// File: contracts/UChildAdministrableERC20.sol\\n\\n\\n\\ncontract PocketToken is\\n    UChildERC20,\\n    Blacklistable,\\n    Pausable,\\n    Rescuable\\n{\\n    function _msgSender()\\n        internal\\n        override(Context, UChildERC20)\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n        override\\n        notBlacklisted(_msgSender())\\n    {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(recipient)\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(sender)\\n        notBlacklisted(recipient)\\n        returns (bool)\\n    {\\n        _transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _approveWithAuthorization(\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _increaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _decreaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused notBlacklisted(owner) {\\n        _withdrawWithAuthorization(\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xc9e73f5a7f4c9df3b9383a106ea864fb13bcf16189a5c6c4376055b7e11c4f10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526008805460ff19908116909155600d805490911690553480156200002757600080fd5b5060408051602080820183526000808352835180830185529081528351808501909452600b8085526a2837b1b5b2ba2a37b5b2b760a91b949092019384529192620000769160039190620000b9565b50604080518082019091526003808252621412d560ea1b6020909201918252620000a391600491620000b9565b50506005805460ff19166006179055506200019c565b828054620000c7906200015f565b90600052602060002090601f016020900481019282620000eb576000855562000136565b82601f106200010657805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013657825182559160200191906001019062000119565b506200014492915062000148565b5090565b5b8082111562000144576000815560010162000149565b600181811c908216806200017457607f821691505b602082108114156200019657634e487b7160e01b600052602260045260246000fd5b50919050565b6143fe80620001ac6000396000f3fe60806040526004361061038c5760003560e01c80638456cb59116101dc578063d505accf11610102578063e63ab1e9116100a0578063f515e6f21161006f578063f515e6f214610b8a578063f9f92be414610bac578063fa2c322d14610bcc578063fe575a8714610c0057600080fd5b8063e63ab1e914610ad3578063e8d6fc4714610af5578063e94a010214610b0a578063eccec5a814610b5d57600080fd5b8063dd62ed3e116100dc578063dd62ed3e14610a2d578063de7ea79d14610a73578063e1560fd314610a93578063e3ee160e14610ab357600080fd5b8063d505accf146109b9578063d547741f146109d9578063d9169487146109f957600080fd5b8063a457c2d71161017a578063c237108f11610149578063c237108f14610925578063c7b84f8d14610945578063ca15c87314610979578063cf2c52cb1461099957600080fd5b8063a457c2d7146108a5578063a9059cbb146108c5578063b0086095146108e5578063b2118a8d1461090557600080fd5b806395d89b41116101b657806395d89b4114610813578063a0cc6a6814610828578063a217fddf1461085c578063a3b0b5a31461087157600080fd5b80638456cb59146107a65780639010d07c146107bb57806391d14854146107f357600080fd5b8063313ce567116102c157806356ce0e6c1161025f578063713725441161022e57806371372544146107195780637b766e5f1461073b5780637cfa1cfa1461075b5780637ecebe001461077057600080fd5b806356ce0e6c1461068b5780635a049a70146106ab5780635c975abb146106cb57806370a08231146106e357600080fd5b8063395093511161029b57806339509351146106025780633f4ba83a1461062257806340c10f19146106375780634b71f5c31461065757600080fd5b8063313ce567146105aa5780633644e515146105cc57806336568abe146105e257600080fd5b80631a8952661161032e578063248a9ca311610308578063248a9ca3146105065780632e1a7d4d146105365780632f2ff15d1461055657806330adf81f1461057657600080fd5b80631a895266146104905780632004d291146104b257806323b872dd146104e657600080fd5b8063100a15601161036a578063100a1560146103ff57806310c8b40414610421578063158ef93e1461046357806318160ddd1461047b57600080fd5b806306fdde0314610391578063095ea7b3146103bc5780630c53c51c146103ec575b600080fd5b34801561039d57600080fd5b506103a6610c39565b6040516103b3919061393b565b60405180910390f35b3480156103c857600080fd5b506103dc6103d7366004613966565b610ccb565b60405190151581526020016103b3565b6103a66103fa3660046139be565b610d93565b34801561040b57600080fd5b50610414610f5c565b6040516103b39190613aa6565b34801561042d57600080fd5b506104557f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c81565b6040519081526020016103b3565b34801561046f57600080fd5b5060085460ff166103dc565b34801561048757600080fd5b50600254610455565b34801561049c57600080fd5b506104b06104ab366004613af3565b611026565b005b3480156104be57600080fd5b506104557f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f981565b3480156104f257600080fd5b506103dc610501366004613b10565b6110ac565b34801561051257600080fd5b50610455610521366004613b51565b60009081526006602052604090206002015490565b34801561054257600080fd5b506104b0610551366004613b51565b6111a1565b34801561056257600080fd5b506104b0610571366004613b6a565b6111f7565b34801561058257600080fd5b506104557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b3480156105b657600080fd5b5060055460405160ff90911681526020016103b3565b3480156105d857600080fd5b5061045560095481565b3480156105ee57600080fd5b506104b06105fd366004613b6a565b611283565b34801561060e57600080fd5b506103dc61061d366004613966565b61130d565b34801561062e57600080fd5b506104b06113c1565b34801561064357600080fd5b506104b0610652366004613966565b611433565b34801561066357600080fd5b506104557fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d881565b34801561069757600080fd5b506104b06106a6366004613be3565b61143d565b3480156106b757600080fd5b506104b06106c6366004613c4f565b611549565b3480156106d757600080fd5b50600d5460ff166103dc565b3480156106ef57600080fd5b506104556106fe366004613af3565b6001600160a01b031660009081526020819052604090205490565b34801561072557600080fd5b506104556000805160206142d483398151915281565b34801561074757600080fd5b506104b0610756366004613c9f565b611579565b34801561076757600080fd5b506104146115f2565b34801561077c57600080fd5b5061045561078b366004613af3565b6001600160a01b03166000908152600a602052604090205490565b3480156107b257600080fd5b506104b06116b5565b3480156107c757600080fd5b506107db6107d6366004613d0e565b61172a565b6040516001600160a01b0390911681526020016103b3565b3480156107ff57600080fd5b506103dc61080e366004613b6a565b61174b565b34801561081f57600080fd5b506103a6611763565b34801561083457600080fd5b506104557f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b34801561086857600080fd5b50610455600081565b34801561087d57600080fd5b506104557f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b3480156108b157600080fd5b506103dc6108c0366004613966565b611772565b3480156108d157600080fd5b506103dc6108e0366004613966565b611826565b3480156108f157600080fd5b506104b0610900366004613d30565b6118da565b34801561091157600080fd5b506104b0610920366004613b10565b611991565b34801561093157600080fd5b506104b0610940366004613d30565b6119e7565b34801561095157600080fd5b506104557f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a81565b34801561098557600080fd5b50610455610994366004613b51565b611a91565b3480156109a557600080fd5b506104b06109b4366004613db2565b611aa8565b3480156109c557600080fd5b506104b06109d4366004613e07565b611b10565b3480156109e557600080fd5b506104b06109f4366004613b6a565b611bb8565b348015610a0557600080fd5b506104557f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b348015610a3957600080fd5b50610455610a48366004613e75565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a7f57600080fd5b506104b0610a8e366004613ea3565b611c3b565b348015610a9f57600080fd5b506104b0610aae366004613d30565b611dab565b348015610abf57600080fd5b506104b0610ace366004613d30565b611e55565b348015610adf57600080fd5b5061045560008051602061436483398151915281565b348015610b0157600080fd5b50610414611eff565b348015610b1657600080fd5b50610b50610b25366004613966565b6001600160a01b03919091166000908152600b60209081526040808320938352929052205460ff1690565b6040516103b39190613f4d565b348015610b6957600080fd5b506103a6604051806040016040528060018152602001603160f81b81525081565b348015610b9657600080fd5b5061045560008051602061438483398151915281565b348015610bb857600080fd5b506104b0610bc7366004613af3565b611fc2565b348015610bd857600080fd5b506104557f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65381565b348015610c0c57600080fd5b506103dc610c1b366004613af3565b6001600160a01b03166000908152600c602052604090205460ff1690565b606060038054610c4890613f75565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7490613f75565b8015610cc15780601f10610c9657610100808354040283529160200191610cc1565b820191906000526020600020905b815481529060010190602001808311610ca457829003601f168201915b5050505050905090565b600d5460009060ff1615610cfa5760405162461bcd60e51b8152600401610cf190613fb0565b60405180910390fd5b610d0261204b565b6001600160a01b0381166000908152600c602052604090205460ff1615610d3b5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff1615610d765760405162461bcd60e51b8152600401610cf190613fda565b610d88610d8161204b565b868661205a565b506001949350505050565b60408051606081810183526001600160a01b0388166000908152600a602052928320805491939291829184610dc783614035565b9091555081526001600160a01b03891660208201526040018790529050610df1878287878761217f565b610e475760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b6064820152608401610cf1565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610e7a93929190614050565b60405180910390a1600080306001600160a01b0316888a604051602001610ea292919061407c565b60408051601f1981840301815290829052610ebc916140b3565b6000604051808303816000865af19150503d8060008114610ef9576040519150601f19603f3d011682016040523d82523d6000602084013e610efe565b606091505b509150915081610f505760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610cf1565b98975050505050505050565b60606000610f776000805160206142d4833981519152611a91565b905060008167ffffffffffffffff811115610f9457610f94613992565b604051908082528060200260200182016040528015610fbd578160200160208202803683370190505b50905060005b8281101561101f57610fe36000805160206142d48339815191528261172a565b828281518110610ff557610ff56140cf565b6001600160a01b03909216602092830291909101909101528061101781614035565b915050610fc3565b5092915050565b6000805160206143848339815191526110418161080e61204b565b6007906110615760405162461bcd60e51b8152600401610cf191906140e5565b506001600160a01b0382166000818152600c6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a25050565b600d5460009060ff16156110d25760405162461bcd60e51b8152600401610cf190613fb0565b6110da61204b565b6001600160a01b0381166000908152600c602052604090205460ff16156111135760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0385166000908152600c6020526040902054859060ff161561114e5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0385166000908152600c6020526040902054859060ff16156111895760405162461bcd60e51b8152600401610cf190613fda565b611194878787612285565b5060019695505050505050565b6111a961204b565b6001600160a01b0381166000908152600c602052604090205460ff16156111e25760405162461bcd60e51b8152600401610cf190613fda565b6111f36111ed61204b565b83612305565b5050565b6000828152600660205260409020600201546112159061080e61204b565b6112795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610cf1565b6111f38282612411565b61128b61204b565b6001600160a01b0316816001600160a01b0316146113035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610cf1565b6111f3828261247a565b600d5460009060ff16156113335760405162461bcd60e51b8152600401610cf190613fb0565b61133b61204b565b6001600160a01b0381166000908152600c602052604090205460ff16156113745760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156113af5760405162461bcd60e51b8152600401610cf190613fda565b610d886113ba61204b565b86866124e3565b6000805160206143648339815191526113dc8161080e61204b565b6007906113fc5760405162461bcd60e51b8152600401610cf191906140e5565b50600d805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150565b6111f3828261251b565b600061144b8161080e61204b565b60079061146b5760405162461bcd60e51b8152600401610cf191906140e5565b506114ab85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125f292505050565b6114ea83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061260592505050565b61154285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506126189050565b5050505050565b600d5460ff161561156c5760405162461bcd60e51b8152600401610cf190613fb0565b611542858585858561268c565b600d5460ff161561159c5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0388166000908152600c6020526040902054889060ff16156115d75760405162461bcd60e51b8152600401610cf190613fda565b6115e7898989898989898961278c565b505050505050505050565b6060600061160d600080516020614384833981519152611a91565b905060008167ffffffffffffffff81111561162a5761162a613992565b604051908082528060200260200182016040528015611653578160200160208202803683370190505b50905060005b8281101561101f576116796000805160206143848339815191528261172a565b82828151811061168b5761168b6140cf565b6001600160a01b0390921660209283029190910190910152806116ad81614035565b915050611659565b6000805160206143648339815191526116d08161080e61204b565b6007906116f05760405162461bcd60e51b8152600401610cf191906140e5565b50600d805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150565b60008281526006602052604081206117429083612859565b90505b92915050565b60008281526006602052604081206117429083612865565b606060048054610c4890613f75565b600d5460009060ff16156117985760405162461bcd60e51b8152600401610cf190613fb0565b6117a061204b565b6001600160a01b0381166000908152600c602052604090205460ff16156117d95760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156118145760405162461bcd60e51b8152600401610cf190613fda565b610d8861181f61204b565b868661288e565b600d5460009060ff161561184c5760405162461bcd60e51b8152600401610cf190613fb0565b61185461204b565b6001600160a01b0381166000908152600c602052604090205460ff161561188d5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156118c85760405162461bcd60e51b8152600401610cf190613fda565b610d886118d361204b565b86866128dd565b600d5460ff16156118fd5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff16156119385760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff16156119735760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612a60565b5050505050505050505050565b6000805160206142d48339815191526119ac8161080e61204b565b6007906119cc5760405162461bcd60e51b8152600401610cf191906140e5565b506119e16001600160a01b0385168484612b1d565b50505050565b600d5460ff1615611a0a5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611a455760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611a805760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612b6f565b600081815260066020526040812061174590612c20565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9611ad58161080e61204b565b600790611af55760405162461bcd60e51b8152600401610cf191906140e5565b506000611b0483850185613b51565b9050611542858261251b565b600d5460ff1615611b335760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0387166000908152600c6020526040902054879060ff1615611b6e5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0387166000908152600c6020526040902054879060ff1615611ba95760405162461bcd60e51b8152600401610cf190613fda565b6115e789898989898989612c2a565b600082815260066020526040902060020154611bd69061080e61204b565b6113035760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610cf1565b60085460ff1615611c4b57600080fd5b611c8a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125f292505050565b611cc984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061260592505050565b6005805460ff191660ff8416179055611d028484604051602001611cee92919061418d565b604051602081830303815290604052612de8565b611d146000611d0f61204b565b611279565b611d3e7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a982611279565b611d9686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506126189050565b50506008805460ff1916600117905550505050565b600d5460ff1615611dce5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611e095760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611e445760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612e1d565b600d5460ff1615611e785760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611eb35760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611eee5760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612ece565b60606000611f1a600080516020614364833981519152611a91565b905060008167ffffffffffffffff811115611f3757611f37613992565b604051908082528060200260200182016040528015611f60578160200160208202803683370190505b50905060005b8281101561101f57611f866000805160206143648339815191528261172a565b828281518110611f9857611f986140cf565b6001600160a01b039092166020928302919091019091015280611fba81614035565b915050611f66565b600080516020614384833981519152611fdd8161080e61204b565b600790611ffd5760405162461bcd60e51b8152600401610cf191906140e5565b506001600160a01b0382166000818152600c6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a25050565b6000612055612f7f565b905090565b6001600160a01b0383166120bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610cf1565b6001600160a01b03821661211d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610cf1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006001600160a01b0386166121e55760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201526424a3a722a960d91b6064820152608401610cf1565b845160208087015160408089015180519084012081517f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65394810194909452908301939093526001600160a01b03166060820152608081019190915260009060a0016040516020818303038152906040529050866001600160a01b031661227060095485888886612fdc565b6001600160a01b031614979650505050505050565b6122908383836128dd565b6123008361229c61204b565b6122fb8460405180606001604052806028815260200161433c602891396001600160a01b0389166000908152600160205260408120906122da61204b565b6001600160a01b03168152602081019190915260400160002054919061303e565b61205a565b505050565b6001600160a01b0382166123655760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610cf1565b6123a2816040518060600160405280602281526020016142f4602291396001600160a01b038516600090815260208190526040902054919061303e565b6001600160a01b0383166000908152602081905260409020556002546123c89082613078565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600082815260066020526040902061242990826130ba565b156111f35761243661204b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260066020526040902061249290826130d0565b156111f35761249f61204b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0380841660009081526001602090815260408083209386168352929052205461230090849084906122fb90856130e6565b6001600160a01b0382166125715760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cf1565b60025461257e90826130e6565b6002556001600160a01b0382166000908152602081905260409020546125a490826130e6565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612405565b80516111f390600390602084019061384a565b80516111f390600490602084019061384a565b8151602092830120815191830191909120604080517f36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7818601528082019390935260608301919091523060808301524660a0808401919091528151808403909101815260c090920190528051910120600955565b6126968585613145565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b03871691810191909152606081018590526000906080016040516020818303038152906040529050856001600160a01b031661270860095486868686612fdc565b6001600160a01b03161461272e5760405162461bcd60e51b8152600401610cf1906141ae565b6001600160a01b0386166000818152600b60209081526040808320898452909152808220805460ff19166002179055518792917f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8191a3505050505050565b612798888588886131e4565b604080517f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f960208201526001600160a01b038a1691810191909152606081018890526080810187905260a0810186905260c0810185905260009060e0016040516020818303038152906040529050886001600160a01b031661281f60095486868686612fdc565b6001600160a01b0316146128455760405162461bcd60e51b8152600401610cf1906141ae565b61284f89866132b4565b6115e78989612305565b6000611742838361330e565b6001600160a01b038116600081815260018401602052604081205490919015155b949350505050565b61230083836122fb846040518060600160405280602581526020016143a4602591396001600160a01b03808a166000908152600160209081526040808320938c1683529290522054919061303e565b6001600160a01b0383166129415760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610cf1565b6001600160a01b0382166129a35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610cf1565b6129e081604051806060016040528060268152602001614316602691396001600160a01b038616600090815260208190526040902054919061303e565b6001600160a01b038085166000908152602081905260408082209390935590841681522054612a0f90826130e6565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612172565b612a6c898588886131e4565b604051600090612aac907fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612ad660095486868686612fdc565b6001600160a01b031614612afc5760405162461bcd60e51b8152600401610cf1906141ae565b612b068a866132b4565b612b118a8a8a61288e565b50505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612300908490613394565b612b7b898588886131e4565b604051600090612bbb907f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612be560095486868686612fdc565b6001600160a01b031614612c0b5760405162461bcd60e51b8152600401610cf1906141ae565b612c158a866132b4565b612b118a8a8a6124e3565b6000611745825490565b33301415612c7a5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973207468697320636f6e74726163740000000000000000006044820152606401610cf1565b42841015612cca5760405162461bcd60e51b815260206004820152601960248201527f5065726d69743a207065726d69742069732065787069726564000000000000006044820152606401610cf1565b6001600160a01b0387166000908152600a6020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086612d1783614035565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040529050876001600160a01b0316612d7d60095486868686612fdc565b6001600160a01b031614612dd35760405162461bcd60e51b815260206004820152601960248201527f5065726d69743a20696e76616c6964207369676e6174757265000000000000006044820152606401610cf1565b612dde88888861205a565b5050505050505050565b80604051602001612df9919061422b565b604051602081830303815290604052600790805190602001906111f392919061384a565b612e29898588886131e4565b604051600090612e69907f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612e9360095486868686612fdc565b6001600160a01b031614612eb95760405162461bcd60e51b8152600401610cf1906141ae565b612ec38a866132b4565b612b118a8a8a61205a565b612eda898588886131e4565b604051600090612f1a907f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612f4460095486868686612fdc565b6001600160a01b031614612f6a5760405162461bcd60e51b8152600401610cf1906141ae565b612f748a866132b4565b612b118a8a8a6128dd565b600033301415612fd657600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150612fd99050565b50335b90565b60008086838051906020012060405160200161300f92919061190160f01b81526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061303381878787613466565b979650505050505050565b600081848411156130625760405162461bcd60e51b8152600401610cf1919061393b565b50600061306f848661426c565b95945050505050565b600061174283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061303e565b60006001600160a01b0382166128868482613612565b60006001600160a01b0382166128868482613661565b6000806130f38385614283565b9050838110156117425760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610cf1565b6001600160a01b0382166000908152600b6020908152604080832084845290915281205460ff16600281111561317d5761317d613f37565b146111f35760405162461bcd60e51b815260206004820152603160248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e206973604482015270081d5cd959081bdc8818d85b98d95b1959607a1b6064820152608401610cf1565b81421161324a5760405162461bcd60e51b815260206004820152602e60248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e20697360448201526d081b9bdd081e595d081d985b1a5960921b6064820152608401610cf1565b8042106132aa5760405162461bcd60e51b815260206004820152602860248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e20697360448201526708195e1c1a5c995960c21b6064820152608401610cf1565b6119e18484613145565b6001600160a01b0382166000818152600b60209081526040808320858452909152808220805460ff19166001179055518392917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a35050565b8154600090821061336c5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610cf1565b826000018281548110613381576133816140cf565b9060005260206000200154905092915050565b60006133e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137549092919063ffffffff16565b8051909150156123005780806020019051810190613407919061429b565b6123005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cf1565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156134e75760405162461bcd60e51b815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e6174757265202773276044820152652076616c756560d01b6064820152608401610cf1565b8360ff16601b141580156134ff57508360ff16601c14155b1561355b5760405162461bcd60e51b815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e6174757265202776276044820152652076616c756560d01b6064820152608401610cf1565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156135af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661306f5760405162461bcd60e51b815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e6174757265000000006044820152606401610cf1565b600081815260018301602052604081205461365957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611745565b506000611745565b6000818152600183016020526040812054801561374a57600061368560018361426c565b85549091506000906136999060019061426c565b905060008660000182815481106136b2576136b26140cf565b90600052602060002001549050808760000184815481106136d5576136d56140cf565b6000918252602090912001556136ec836001614283565b6000828152600189016020526040902055865487908061370e5761370e6142bd565b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611745565b6000915050611745565b606061288684846000856060843b6137ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cf1565b600080866001600160a01b031685876040516137ca91906140b3565b60006040518083038185875af1925050503d8060008114613807576040519150601f19603f3d011682016040523d82523d6000602084013e61380c565b606091505b509150915081156138205791506128869050565b8051156138305780518082602001fd5b8360405162461bcd60e51b8152600401610cf1919061393b565b82805461385690613f75565b90600052602060002090601f01602090048101928261387857600085556138be565b82601f1061389157805160ff19168380011785556138be565b828001600101855582156138be579182015b828111156138be5782518255916020019190600101906138a3565b506138ca9291506138ce565b5090565b5b808211156138ca57600081556001016138cf565b60005b838110156138fe5781810151838201526020016138e6565b838111156119e15750506000910152565b600081518084526139278160208601602086016138e3565b601f01601f19169290920160200192915050565b602081526000611742602083018461390f565b6001600160a01b038116811461396357600080fd5b50565b6000806040838503121561397957600080fd5b82356139848161394e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b803560ff811681146139b957600080fd5b919050565b600080600080600060a086880312156139d657600080fd5b85356139e18161394e565b9450602086013567ffffffffffffffff808211156139fe57600080fd5b818801915088601f830112613a1257600080fd5b813581811115613a2457613a24613992565b604051601f8201601f19908116603f01168101908382118183101715613a4c57613a4c613992565b816040528281528b6020848701011115613a6557600080fd5b8260208601602083013760006020848301015280985050505050506040860135925060608601359150613a9a608087016139a8565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015613ae75783516001600160a01b031683529284019291840191600101613ac2565b50909695505050505050565b600060208284031215613b0557600080fd5b81356117428161394e565b600080600060608486031215613b2557600080fd5b8335613b308161394e565b92506020840135613b408161394e565b929592945050506040919091013590565b600060208284031215613b6357600080fd5b5035919050565b60008060408385031215613b7d57600080fd5b823591506020830135613b8f8161394e565b809150509250929050565b60008083601f840112613bac57600080fd5b50813567ffffffffffffffff811115613bc457600080fd5b602083019150836020828501011115613bdc57600080fd5b9250929050565b60008060008060408587031215613bf957600080fd5b843567ffffffffffffffff80821115613c1157600080fd5b613c1d88838901613b9a565b90965094506020870135915080821115613c3657600080fd5b50613c4387828801613b9a565b95989497509550505050565b600080600080600060a08688031215613c6757600080fd5b8535613c728161394e565b945060208601359350613c87604087016139a8565b94979396509394606081013594506080013592915050565b600080600080600080600080610100898b031215613cbc57600080fd5b8835613cc78161394e565b975060208901359650604089013595506060890135945060808901359350613cf160a08a016139a8565b925060c0890135915060e089013590509295985092959890939650565b60008060408385031215613d2157600080fd5b50508035926020909101359150565b60008060008060008060008060006101208a8c031215613d4f57600080fd5b8935613d5a8161394e565b985060208a0135613d6a8161394e565b975060408a0135965060608a0135955060808a0135945060a08a01359350613d9460c08b016139a8565b925060e08a013591506101008a013590509295985092959850929598565b600080600060408486031215613dc757600080fd5b8335613dd28161394e565b9250602084013567ffffffffffffffff811115613dee57600080fd5b613dfa86828701613b9a565b9497909650939450505050565b600080600080600080600060e0888a031215613e2257600080fd5b8735613e2d8161394e565b96506020880135613e3d8161394e565b95506040880135945060608801359350613e59608089016139a8565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613e8857600080fd5b8235613e938161394e565b91506020830135613b8f8161394e565b60008060008060008060808789031215613ebc57600080fd5b863567ffffffffffffffff80821115613ed457600080fd5b613ee08a838b01613b9a565b90985096506020890135915080821115613ef957600080fd5b50613f0689828a01613b9a565b9095509350613f199050604088016139a8565b91506060870135613f298161394e565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310613f6f57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c90821680613f8957607f821691505b60208210811415613faa57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6040820152641a5cdd195960da1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156140495761404961401f565b5060010190565b6001600160a01b0384811682528316602082015260606040820181905260009061306f9083018461390f565b6000835161408e8184602088016138e3565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600082516140c58184602087016138e3565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600060208083526000845481600182811c91508083168061410757607f831692505b85831081141561412557634e487b7160e01b85526022600452602485fd5b87860183815260200181801561414257600181146141535761417e565b60ff1986168252878201965061417e565b60008b81526020902060005b868110156141785781548482015290850190890161415f565b83019750505b50949998505050505050505050565b6410da1a5b1960da1b81528183600583013760009101600501908152919050565b60208082526021908201527f4761734162737472616374696f6e3a20696e76616c6964207369676e617475726040820152606560f81b606082015260800190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b6000825161423d8184602087016138e3565b7f3a20494e53554646494349454e545f5045524d495353494f4e53000000000000920191825250601a01919050565b60008282101561427e5761427e61401f565b500390565b600082198211156142965761429661401f565b500190565b6000602082840312156142ad57600080fd5b8151801515811461174257600080fd5b634e487b7160e01b600052603160045260246000fdfecf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a05045524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636565d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a98db8a220cd0f09badce9f22d0ba7e93edb3d404448cc3560d391ab096ad16e945524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220feb5d3e3faecd0f270b0eee1b1c8f2067998902eed2b14c8f020a61cfa68b9c164736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061038c5760003560e01c80638456cb59116101dc578063d505accf11610102578063e63ab1e9116100a0578063f515e6f21161006f578063f515e6f214610b8a578063f9f92be414610bac578063fa2c322d14610bcc578063fe575a8714610c0057600080fd5b8063e63ab1e914610ad3578063e8d6fc4714610af5578063e94a010214610b0a578063eccec5a814610b5d57600080fd5b8063dd62ed3e116100dc578063dd62ed3e14610a2d578063de7ea79d14610a73578063e1560fd314610a93578063e3ee160e14610ab357600080fd5b8063d505accf146109b9578063d547741f146109d9578063d9169487146109f957600080fd5b8063a457c2d71161017a578063c237108f11610149578063c237108f14610925578063c7b84f8d14610945578063ca15c87314610979578063cf2c52cb1461099957600080fd5b8063a457c2d7146108a5578063a9059cbb146108c5578063b0086095146108e5578063b2118a8d1461090557600080fd5b806395d89b41116101b657806395d89b4114610813578063a0cc6a6814610828578063a217fddf1461085c578063a3b0b5a31461087157600080fd5b80638456cb59146107a65780639010d07c146107bb57806391d14854146107f357600080fd5b8063313ce567116102c157806356ce0e6c1161025f578063713725441161022e57806371372544146107195780637b766e5f1461073b5780637cfa1cfa1461075b5780637ecebe001461077057600080fd5b806356ce0e6c1461068b5780635a049a70146106ab5780635c975abb146106cb57806370a08231146106e357600080fd5b8063395093511161029b57806339509351146106025780633f4ba83a1461062257806340c10f19146106375780634b71f5c31461065757600080fd5b8063313ce567146105aa5780633644e515146105cc57806336568abe146105e257600080fd5b80631a8952661161032e578063248a9ca311610308578063248a9ca3146105065780632e1a7d4d146105365780632f2ff15d1461055657806330adf81f1461057657600080fd5b80631a895266146104905780632004d291146104b257806323b872dd146104e657600080fd5b8063100a15601161036a578063100a1560146103ff57806310c8b40414610421578063158ef93e1461046357806318160ddd1461047b57600080fd5b806306fdde0314610391578063095ea7b3146103bc5780630c53c51c146103ec575b600080fd5b34801561039d57600080fd5b506103a6610c39565b6040516103b3919061393b565b60405180910390f35b3480156103c857600080fd5b506103dc6103d7366004613966565b610ccb565b60405190151581526020016103b3565b6103a66103fa3660046139be565b610d93565b34801561040b57600080fd5b50610414610f5c565b6040516103b39190613aa6565b34801561042d57600080fd5b506104557f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c81565b6040519081526020016103b3565b34801561046f57600080fd5b5060085460ff166103dc565b34801561048757600080fd5b50600254610455565b34801561049c57600080fd5b506104b06104ab366004613af3565b611026565b005b3480156104be57600080fd5b506104557f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f981565b3480156104f257600080fd5b506103dc610501366004613b10565b6110ac565b34801561051257600080fd5b50610455610521366004613b51565b60009081526006602052604090206002015490565b34801561054257600080fd5b506104b0610551366004613b51565b6111a1565b34801561056257600080fd5b506104b0610571366004613b6a565b6111f7565b34801561058257600080fd5b506104557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b3480156105b657600080fd5b5060055460405160ff90911681526020016103b3565b3480156105d857600080fd5b5061045560095481565b3480156105ee57600080fd5b506104b06105fd366004613b6a565b611283565b34801561060e57600080fd5b506103dc61061d366004613966565b61130d565b34801561062e57600080fd5b506104b06113c1565b34801561064357600080fd5b506104b0610652366004613966565b611433565b34801561066357600080fd5b506104557fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d881565b34801561069757600080fd5b506104b06106a6366004613be3565b61143d565b3480156106b757600080fd5b506104b06106c6366004613c4f565b611549565b3480156106d757600080fd5b50600d5460ff166103dc565b3480156106ef57600080fd5b506104556106fe366004613af3565b6001600160a01b031660009081526020819052604090205490565b34801561072557600080fd5b506104556000805160206142d483398151915281565b34801561074757600080fd5b506104b0610756366004613c9f565b611579565b34801561076757600080fd5b506104146115f2565b34801561077c57600080fd5b5061045561078b366004613af3565b6001600160a01b03166000908152600a602052604090205490565b3480156107b257600080fd5b506104b06116b5565b3480156107c757600080fd5b506107db6107d6366004613d0e565b61172a565b6040516001600160a01b0390911681526020016103b3565b3480156107ff57600080fd5b506103dc61080e366004613b6a565b61174b565b34801561081f57600080fd5b506103a6611763565b34801561083457600080fd5b506104557f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b34801561086857600080fd5b50610455600081565b34801561087d57600080fd5b506104557f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b3480156108b157600080fd5b506103dc6108c0366004613966565b611772565b3480156108d157600080fd5b506103dc6108e0366004613966565b611826565b3480156108f157600080fd5b506104b0610900366004613d30565b6118da565b34801561091157600080fd5b506104b0610920366004613b10565b611991565b34801561093157600080fd5b506104b0610940366004613d30565b6119e7565b34801561095157600080fd5b506104557f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a81565b34801561098557600080fd5b50610455610994366004613b51565b611a91565b3480156109a557600080fd5b506104b06109b4366004613db2565b611aa8565b3480156109c557600080fd5b506104b06109d4366004613e07565b611b10565b3480156109e557600080fd5b506104b06109f4366004613b6a565b611bb8565b348015610a0557600080fd5b506104557f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b348015610a3957600080fd5b50610455610a48366004613e75565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a7f57600080fd5b506104b0610a8e366004613ea3565b611c3b565b348015610a9f57600080fd5b506104b0610aae366004613d30565b611dab565b348015610abf57600080fd5b506104b0610ace366004613d30565b611e55565b348015610adf57600080fd5b5061045560008051602061436483398151915281565b348015610b0157600080fd5b50610414611eff565b348015610b1657600080fd5b50610b50610b25366004613966565b6001600160a01b03919091166000908152600b60209081526040808320938352929052205460ff1690565b6040516103b39190613f4d565b348015610b6957600080fd5b506103a6604051806040016040528060018152602001603160f81b81525081565b348015610b9657600080fd5b5061045560008051602061438483398151915281565b348015610bb857600080fd5b506104b0610bc7366004613af3565b611fc2565b348015610bd857600080fd5b506104557f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65381565b348015610c0c57600080fd5b506103dc610c1b366004613af3565b6001600160a01b03166000908152600c602052604090205460ff1690565b606060038054610c4890613f75565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7490613f75565b8015610cc15780601f10610c9657610100808354040283529160200191610cc1565b820191906000526020600020905b815481529060010190602001808311610ca457829003601f168201915b5050505050905090565b600d5460009060ff1615610cfa5760405162461bcd60e51b8152600401610cf190613fb0565b60405180910390fd5b610d0261204b565b6001600160a01b0381166000908152600c602052604090205460ff1615610d3b5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff1615610d765760405162461bcd60e51b8152600401610cf190613fda565b610d88610d8161204b565b868661205a565b506001949350505050565b60408051606081810183526001600160a01b0388166000908152600a602052928320805491939291829184610dc783614035565b9091555081526001600160a01b03891660208201526040018790529050610df1878287878761217f565b610e475760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b6064820152608401610cf1565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610e7a93929190614050565b60405180910390a1600080306001600160a01b0316888a604051602001610ea292919061407c565b60408051601f1981840301815290829052610ebc916140b3565b6000604051808303816000865af19150503d8060008114610ef9576040519150601f19603f3d011682016040523d82523d6000602084013e610efe565b606091505b509150915081610f505760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610cf1565b98975050505050505050565b60606000610f776000805160206142d4833981519152611a91565b905060008167ffffffffffffffff811115610f9457610f94613992565b604051908082528060200260200182016040528015610fbd578160200160208202803683370190505b50905060005b8281101561101f57610fe36000805160206142d48339815191528261172a565b828281518110610ff557610ff56140cf565b6001600160a01b03909216602092830291909101909101528061101781614035565b915050610fc3565b5092915050565b6000805160206143848339815191526110418161080e61204b565b6007906110615760405162461bcd60e51b8152600401610cf191906140e5565b506001600160a01b0382166000818152600c6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a25050565b600d5460009060ff16156110d25760405162461bcd60e51b8152600401610cf190613fb0565b6110da61204b565b6001600160a01b0381166000908152600c602052604090205460ff16156111135760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0385166000908152600c6020526040902054859060ff161561114e5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0385166000908152600c6020526040902054859060ff16156111895760405162461bcd60e51b8152600401610cf190613fda565b611194878787612285565b5060019695505050505050565b6111a961204b565b6001600160a01b0381166000908152600c602052604090205460ff16156111e25760405162461bcd60e51b8152600401610cf190613fda565b6111f36111ed61204b565b83612305565b5050565b6000828152600660205260409020600201546112159061080e61204b565b6112795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610cf1565b6111f38282612411565b61128b61204b565b6001600160a01b0316816001600160a01b0316146113035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610cf1565b6111f3828261247a565b600d5460009060ff16156113335760405162461bcd60e51b8152600401610cf190613fb0565b61133b61204b565b6001600160a01b0381166000908152600c602052604090205460ff16156113745760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156113af5760405162461bcd60e51b8152600401610cf190613fda565b610d886113ba61204b565b86866124e3565b6000805160206143648339815191526113dc8161080e61204b565b6007906113fc5760405162461bcd60e51b8152600401610cf191906140e5565b50600d805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150565b6111f3828261251b565b600061144b8161080e61204b565b60079061146b5760405162461bcd60e51b8152600401610cf191906140e5565b506114ab85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125f292505050565b6114ea83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061260592505050565b61154285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506126189050565b5050505050565b600d5460ff161561156c5760405162461bcd60e51b8152600401610cf190613fb0565b611542858585858561268c565b600d5460ff161561159c5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0388166000908152600c6020526040902054889060ff16156115d75760405162461bcd60e51b8152600401610cf190613fda565b6115e7898989898989898961278c565b505050505050505050565b6060600061160d600080516020614384833981519152611a91565b905060008167ffffffffffffffff81111561162a5761162a613992565b604051908082528060200260200182016040528015611653578160200160208202803683370190505b50905060005b8281101561101f576116796000805160206143848339815191528261172a565b82828151811061168b5761168b6140cf565b6001600160a01b0390921660209283029190910190910152806116ad81614035565b915050611659565b6000805160206143648339815191526116d08161080e61204b565b6007906116f05760405162461bcd60e51b8152600401610cf191906140e5565b50600d805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150565b60008281526006602052604081206117429083612859565b90505b92915050565b60008281526006602052604081206117429083612865565b606060048054610c4890613f75565b600d5460009060ff16156117985760405162461bcd60e51b8152600401610cf190613fb0565b6117a061204b565b6001600160a01b0381166000908152600c602052604090205460ff16156117d95760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156118145760405162461bcd60e51b8152600401610cf190613fda565b610d8861181f61204b565b868661288e565b600d5460009060ff161561184c5760405162461bcd60e51b8152600401610cf190613fb0565b61185461204b565b6001600160a01b0381166000908152600c602052604090205460ff161561188d5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0384166000908152600c6020526040902054849060ff16156118c85760405162461bcd60e51b8152600401610cf190613fda565b610d886118d361204b565b86866128dd565b600d5460ff16156118fd5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff16156119385760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff16156119735760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612a60565b5050505050505050505050565b6000805160206142d48339815191526119ac8161080e61204b565b6007906119cc5760405162461bcd60e51b8152600401610cf191906140e5565b506119e16001600160a01b0385168484612b1d565b50505050565b600d5460ff1615611a0a5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611a455760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611a805760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612b6f565b600081815260066020526040812061174590612c20565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9611ad58161080e61204b565b600790611af55760405162461bcd60e51b8152600401610cf191906140e5565b506000611b0483850185613b51565b9050611542858261251b565b600d5460ff1615611b335760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0387166000908152600c6020526040902054879060ff1615611b6e5760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0387166000908152600c6020526040902054879060ff1615611ba95760405162461bcd60e51b8152600401610cf190613fda565b6115e789898989898989612c2a565b600082815260066020526040902060020154611bd69061080e61204b565b6113035760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610cf1565b60085460ff1615611c4b57600080fd5b611c8a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125f292505050565b611cc984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061260592505050565b6005805460ff191660ff8416179055611d028484604051602001611cee92919061418d565b604051602081830303815290604052612de8565b611d146000611d0f61204b565b611279565b611d3e7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a982611279565b611d9686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506126189050565b50506008805460ff1916600117905550505050565b600d5460ff1615611dce5760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611e095760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611e445760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612e1d565b600d5460ff1615611e785760405162461bcd60e51b8152600401610cf190613fb0565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611eb35760405162461bcd60e51b8152600401610cf190613fda565b6001600160a01b0389166000908152600c6020526040902054899060ff1615611eee5760405162461bcd60e51b8152600401610cf190613fda565b6119848b8b8b8b8b8b8b8b8b612ece565b60606000611f1a600080516020614364833981519152611a91565b905060008167ffffffffffffffff811115611f3757611f37613992565b604051908082528060200260200182016040528015611f60578160200160208202803683370190505b50905060005b8281101561101f57611f866000805160206143648339815191528261172a565b828281518110611f9857611f986140cf565b6001600160a01b039092166020928302919091019091015280611fba81614035565b915050611f66565b600080516020614384833981519152611fdd8161080e61204b565b600790611ffd5760405162461bcd60e51b8152600401610cf191906140e5565b506001600160a01b0382166000818152600c6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a25050565b6000612055612f7f565b905090565b6001600160a01b0383166120bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610cf1565b6001600160a01b03821661211d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610cf1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006001600160a01b0386166121e55760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201526424a3a722a960d91b6064820152608401610cf1565b845160208087015160408089015180519084012081517f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65394810194909452908301939093526001600160a01b03166060820152608081019190915260009060a0016040516020818303038152906040529050866001600160a01b031661227060095485888886612fdc565b6001600160a01b031614979650505050505050565b6122908383836128dd565b6123008361229c61204b565b6122fb8460405180606001604052806028815260200161433c602891396001600160a01b0389166000908152600160205260408120906122da61204b565b6001600160a01b03168152602081019190915260400160002054919061303e565b61205a565b505050565b6001600160a01b0382166123655760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610cf1565b6123a2816040518060600160405280602281526020016142f4602291396001600160a01b038516600090815260208190526040902054919061303e565b6001600160a01b0383166000908152602081905260409020556002546123c89082613078565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600082815260066020526040902061242990826130ba565b156111f35761243661204b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260066020526040902061249290826130d0565b156111f35761249f61204b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0380841660009081526001602090815260408083209386168352929052205461230090849084906122fb90856130e6565b6001600160a01b0382166125715760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cf1565b60025461257e90826130e6565b6002556001600160a01b0382166000908152602081905260409020546125a490826130e6565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612405565b80516111f390600390602084019061384a565b80516111f390600490602084019061384a565b8151602092830120815191830191909120604080517f36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7818601528082019390935260608301919091523060808301524660a0808401919091528151808403909101815260c090920190528051910120600955565b6126968585613145565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b03871691810191909152606081018590526000906080016040516020818303038152906040529050856001600160a01b031661270860095486868686612fdc565b6001600160a01b03161461272e5760405162461bcd60e51b8152600401610cf1906141ae565b6001600160a01b0386166000818152600b60209081526040808320898452909152808220805460ff19166002179055518792917f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8191a3505050505050565b612798888588886131e4565b604080517f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f960208201526001600160a01b038a1691810191909152606081018890526080810187905260a0810186905260c0810185905260009060e0016040516020818303038152906040529050886001600160a01b031661281f60095486868686612fdc565b6001600160a01b0316146128455760405162461bcd60e51b8152600401610cf1906141ae565b61284f89866132b4565b6115e78989612305565b6000611742838361330e565b6001600160a01b038116600081815260018401602052604081205490919015155b949350505050565b61230083836122fb846040518060600160405280602581526020016143a4602591396001600160a01b03808a166000908152600160209081526040808320938c1683529290522054919061303e565b6001600160a01b0383166129415760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610cf1565b6001600160a01b0382166129a35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610cf1565b6129e081604051806060016040528060268152602001614316602691396001600160a01b038616600090815260208190526040902054919061303e565b6001600160a01b038085166000908152602081905260408082209390935590841681522054612a0f90826130e6565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612172565b612a6c898588886131e4565b604051600090612aac907fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612ad660095486868686612fdc565b6001600160a01b031614612afc5760405162461bcd60e51b8152600401610cf1906141ae565b612b068a866132b4565b612b118a8a8a61288e565b50505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612300908490613394565b612b7b898588886131e4565b604051600090612bbb907f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612be560095486868686612fdc565b6001600160a01b031614612c0b5760405162461bcd60e51b8152600401610cf1906141ae565b612c158a866132b4565b612b118a8a8a6124e3565b6000611745825490565b33301415612c7a5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973207468697320636f6e74726163740000000000000000006044820152606401610cf1565b42841015612cca5760405162461bcd60e51b815260206004820152601960248201527f5065726d69743a207065726d69742069732065787069726564000000000000006044820152606401610cf1565b6001600160a01b0387166000908152600a6020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086612d1783614035565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040529050876001600160a01b0316612d7d60095486868686612fdc565b6001600160a01b031614612dd35760405162461bcd60e51b815260206004820152601960248201527f5065726d69743a20696e76616c6964207369676e6174757265000000000000006044820152606401610cf1565b612dde88888861205a565b5050505050505050565b80604051602001612df9919061422b565b604051602081830303815290604052600790805190602001906111f392919061384a565b612e29898588886131e4565b604051600090612e69907f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612e9360095486868686612fdc565b6001600160a01b031614612eb95760405162461bcd60e51b8152600401610cf1906141ae565b612ec38a866132b4565b612b118a8a8a61205a565b612eda898588886131e4565b604051600090612f1a907f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267908c908c908c908c908c908c906020016141ef565b6040516020818303038152906040529050896001600160a01b0316612f4460095486868686612fdc565b6001600160a01b031614612f6a5760405162461bcd60e51b8152600401610cf1906141ae565b612f748a866132b4565b612b118a8a8a6128dd565b600033301415612fd657600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150612fd99050565b50335b90565b60008086838051906020012060405160200161300f92919061190160f01b81526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061303381878787613466565b979650505050505050565b600081848411156130625760405162461bcd60e51b8152600401610cf1919061393b565b50600061306f848661426c565b95945050505050565b600061174283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061303e565b60006001600160a01b0382166128868482613612565b60006001600160a01b0382166128868482613661565b6000806130f38385614283565b9050838110156117425760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610cf1565b6001600160a01b0382166000908152600b6020908152604080832084845290915281205460ff16600281111561317d5761317d613f37565b146111f35760405162461bcd60e51b815260206004820152603160248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e206973604482015270081d5cd959081bdc8818d85b98d95b1959607a1b6064820152608401610cf1565b81421161324a5760405162461bcd60e51b815260206004820152602e60248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e20697360448201526d081b9bdd081e595d081d985b1a5960921b6064820152608401610cf1565b8042106132aa5760405162461bcd60e51b815260206004820152602860248201527f4761734162737472616374696f6e3a20617574686f72697a6174696f6e20697360448201526708195e1c1a5c995960c21b6064820152608401610cf1565b6119e18484613145565b6001600160a01b0382166000818152600b60209081526040808320858452909152808220805460ff19166001179055518392917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a35050565b8154600090821061336c5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610cf1565b826000018281548110613381576133816140cf565b9060005260206000200154905092915050565b60006133e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137549092919063ffffffff16565b8051909150156123005780806020019051810190613407919061429b565b6123005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610cf1565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156134e75760405162461bcd60e51b815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e6174757265202773276044820152652076616c756560d01b6064820152608401610cf1565b8360ff16601b141580156134ff57508360ff16601c14155b1561355b5760405162461bcd60e51b815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e6174757265202776276044820152652076616c756560d01b6064820152608401610cf1565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156135af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661306f5760405162461bcd60e51b815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e6174757265000000006044820152606401610cf1565b600081815260018301602052604081205461365957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611745565b506000611745565b6000818152600183016020526040812054801561374a57600061368560018361426c565b85549091506000906136999060019061426c565b905060008660000182815481106136b2576136b26140cf565b90600052602060002001549050808760000184815481106136d5576136d56140cf565b6000918252602090912001556136ec836001614283565b6000828152600189016020526040902055865487908061370e5761370e6142bd565b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611745565b6000915050611745565b606061288684846000856060843b6137ae5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610cf1565b600080866001600160a01b031685876040516137ca91906140b3565b60006040518083038185875af1925050503d8060008114613807576040519150601f19603f3d011682016040523d82523d6000602084013e61380c565b606091505b509150915081156138205791506128869050565b8051156138305780518082602001fd5b8360405162461bcd60e51b8152600401610cf1919061393b565b82805461385690613f75565b90600052602060002090601f01602090048101928261387857600085556138be565b82601f1061389157805160ff19168380011785556138be565b828001600101855582156138be579182015b828111156138be5782518255916020019190600101906138a3565b506138ca9291506138ce565b5090565b5b808211156138ca57600081556001016138cf565b60005b838110156138fe5781810151838201526020016138e6565b838111156119e15750506000910152565b600081518084526139278160208601602086016138e3565b601f01601f19169290920160200192915050565b602081526000611742602083018461390f565b6001600160a01b038116811461396357600080fd5b50565b6000806040838503121561397957600080fd5b82356139848161394e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b803560ff811681146139b957600080fd5b919050565b600080600080600060a086880312156139d657600080fd5b85356139e18161394e565b9450602086013567ffffffffffffffff808211156139fe57600080fd5b818801915088601f830112613a1257600080fd5b813581811115613a2457613a24613992565b604051601f8201601f19908116603f01168101908382118183101715613a4c57613a4c613992565b816040528281528b6020848701011115613a6557600080fd5b8260208601602083013760006020848301015280985050505050506040860135925060608601359150613a9a608087016139a8565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015613ae75783516001600160a01b031683529284019291840191600101613ac2565b50909695505050505050565b600060208284031215613b0557600080fd5b81356117428161394e565b600080600060608486031215613b2557600080fd5b8335613b308161394e565b92506020840135613b408161394e565b929592945050506040919091013590565b600060208284031215613b6357600080fd5b5035919050565b60008060408385031215613b7d57600080fd5b823591506020830135613b8f8161394e565b809150509250929050565b60008083601f840112613bac57600080fd5b50813567ffffffffffffffff811115613bc457600080fd5b602083019150836020828501011115613bdc57600080fd5b9250929050565b60008060008060408587031215613bf957600080fd5b843567ffffffffffffffff80821115613c1157600080fd5b613c1d88838901613b9a565b90965094506020870135915080821115613c3657600080fd5b50613c4387828801613b9a565b95989497509550505050565b600080600080600060a08688031215613c6757600080fd5b8535613c728161394e565b945060208601359350613c87604087016139a8565b94979396509394606081013594506080013592915050565b600080600080600080600080610100898b031215613cbc57600080fd5b8835613cc78161394e565b975060208901359650604089013595506060890135945060808901359350613cf160a08a016139a8565b925060c0890135915060e089013590509295985092959890939650565b60008060408385031215613d2157600080fd5b50508035926020909101359150565b60008060008060008060008060006101208a8c031215613d4f57600080fd5b8935613d5a8161394e565b985060208a0135613d6a8161394e565b975060408a0135965060608a0135955060808a0135945060a08a01359350613d9460c08b016139a8565b925060e08a013591506101008a013590509295985092959850929598565b600080600060408486031215613dc757600080fd5b8335613dd28161394e565b9250602084013567ffffffffffffffff811115613dee57600080fd5b613dfa86828701613b9a565b9497909650939450505050565b600080600080600080600060e0888a031215613e2257600080fd5b8735613e2d8161394e565b96506020880135613e3d8161394e565b95506040880135945060608801359350613e59608089016139a8565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613e8857600080fd5b8235613e938161394e565b91506020830135613b8f8161394e565b60008060008060008060808789031215613ebc57600080fd5b863567ffffffffffffffff80821115613ed457600080fd5b613ee08a838b01613b9a565b90985096506020890135915080821115613ef957600080fd5b50613f0689828a01613b9a565b9095509350613f199050604088016139a8565b91506060870135613f298161394e565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310613f6f57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c90821680613f8957607f821691505b60208210811415613faa57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6040820152641a5cdd195960da1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156140495761404961401f565b5060010190565b6001600160a01b0384811682528316602082015260606040820181905260009061306f9083018461390f565b6000835161408e8184602088016138e3565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600082516140c58184602087016138e3565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600060208083526000845481600182811c91508083168061410757607f831692505b85831081141561412557634e487b7160e01b85526022600452602485fd5b87860183815260200181801561414257600181146141535761417e565b60ff1986168252878201965061417e565b60008b81526020902060005b868110156141785781548482015290850190890161415f565b83019750505b50949998505050505050505050565b6410da1a5b1960da1b81528183600583013760009101600501908152919050565b60208082526021908201527f4761734162737472616374696f6e3a20696e76616c6964207369676e617475726040820152606560f81b606082015260800190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b6000825161423d8184602087016138e3565b7f3a20494e53554646494349454e545f5045524d495353494f4e53000000000000920191825250601a01919050565b60008282101561427e5761427e61401f565b500390565b600082198211156142965761429661401f565b500190565b6000602082840312156142ad57600080fd5b8151801515811461174257600080fd5b634e487b7160e01b600052603160045260246000fdfecf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a05045524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636565d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a98db8a220cd0f09badce9f22d0ba7e93edb3d404448cc3560d391ab096ad16e945524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220feb5d3e3faecd0f270b0eee1b1c8f2067998902eed2b14c8f020a61cfa68b9c164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount of allowance"
        }
      },
      "authorizationState(address,bytes32)": {
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization"
        },
        "returns": {
          "_0": "Authorization state"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "blacklist(address)": {
        "details": "Adds an account to the blacklist",
        "params": {
          "account": "The address to blacklist"
        }
      },
      "blacklisters()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "details": "Works only if the authorization is not yet used.",
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization",
          "r": "r of the signature",
          "s": "s of the signature",
          "v": "v of the signature"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "decrement": "Amount of decrease in allowance",
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)"
        }
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required amount for user Make sure minting is done only by this function",
        "params": {
          "depositData": "abi encoded amount",
          "user": "user address for whom deposit is being done"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "increment": "Amount of increase in allowance",
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)"
        }
      },
      "initialize(string,string,uint8,address)": {
        "details": "meant to be called once immediately after deployment"
      },
      "isBlacklisted(address)": {
        "details": "Checks if an account is blacklisted",
        "params": {
          "account": "The address to check"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "params": {
          "owner": "Token owner's address"
        },
        "returns": {
          "_0": "Next nonce"
        }
      },
      "paused()": {
        "returns": {
          "_0": "True if paused"
        }
      },
      "pausers()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "Expiration time, seconds since the epoch",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "value": "Amount of allowance"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "rescueERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Recipient address",
          "tokenContract": "ERC20 token contract address"
        }
      },
      "rescuers()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "unBlacklist(address)": {
        "params": {
          "account": "The address to remove from the blacklist"
        }
      },
      "withdraw(uint256)": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "amount": "amount of tokens to withdraw"
        }
      },
      "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Update allowance with a signed authorization"
      },
      "authorizationState(address,bytes32)": {
        "notice": "Returns the state of an authorization"
      },
      "blacklisters()": {
        "notice": "Return the members of the blacklister role"
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Attempt to cancel an authorization"
      },
      "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Decrease allowance with a signed authorization"
      },
      "deposit(address,bytes)": {
        "notice": "called when token is deposited on root chain"
      },
      "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Increase allowance with a signed authorization"
      },
      "initialize(string,string,uint8,address)": {
        "notice": "Initialize the contract after it has been proxified"
      },
      "nonces(address)": {
        "notice": "Nonces for permit / meta-transactions"
      },
      "pause()": {
        "notice": "Pause this contract"
      },
      "paused()": {
        "notice": "Returns whether this contract is paused"
      },
      "pausers()": {
        "notice": "Return the members of the pauser role"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Update allowance with a signed permit"
      },
      "rescueERC20(address,address,uint256)": {
        "notice": "Rescue ERC20 tokens locked up in this contract."
      },
      "rescuers()": {
        "notice": "Return the members of the rescuer role"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a transfer with a signed authorization"
      },
      "unBlacklist(address)": {
        "notice": "Removes an account from the blacklist"
      },
      "unpause()": {
        "notice": "Unpause this contract"
      },
      "withdraw(uint256)": {
        "notice": "called when user wants to withdraw tokens back to root chain"
      },
      "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a withdrawal with a signed authorization. This is used to transfer tokens back to the root chain."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 571,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 573,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 575,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 577,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 579,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 1614,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1609_storage)"
      },
      {
        "astId": 1878,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_revertMsg",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1922,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 2094,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2115,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2432,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_authorizationStates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)2424))"
      },
      {
        "astId": 3337,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_blacklisted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3476,
        "contract": "contracts/PocketToken.sol:PocketToken",
        "label": "_paused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AuthorizationState)2424": {
        "encoding": "inplace",
        "label": "enum GasAbstraction.AuthorizationState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)2424))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => enum GasAbstraction.AuthorizationState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(AuthorizationState)2424)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_enum(AuthorizationState)2424)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum GasAbstraction.AuthorizationState)",
        "numberOfBytes": "32",
        "value": "t_enum(AuthorizationState)2424"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1609_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1609_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)1342_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1341,
            "contract": "contracts/PocketToken.sol:PocketToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1156_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1609_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1606,
            "contract": "contracts/PocketToken.sol:PocketToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1342_storage"
          },
          {
            "astId": 1608,
            "contract": "contracts/PocketToken.sol:PocketToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1156_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1151,
            "contract": "contracts/PocketToken.sol:PocketToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1155,
            "contract": "contracts/PocketToken.sol:PocketToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}