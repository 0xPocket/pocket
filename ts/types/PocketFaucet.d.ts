/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PocketFaucetInterface extends ethers.utils.Interface {
  functions: {
    "CHILD_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PARENT_ROLE()": FunctionFragment;
    "WITHDRAW_ROLE()": FunctionFragment;
    "addChild(uint256,uint256,address)": FunctionFragment;
    "addFunds(uint256,address)": FunctionFragment;
    "changeChildAddress(address,address)": FunctionFragment;
    "changeConfig(uint256,uint256,address)": FunctionFragment;
    "changeParentAddr(address,address)": FunctionFragment;
    "childToConfig(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "getNumberChildren(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "parentToChildren(address,uint256)": FunctionFragment;
    "removeChild(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setActive(bool,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawCoin(uint256)": FunctionFragment;
    "withdrawFundsFromChild(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHILD_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChild",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFunds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeChildAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeConfig",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeParentAddr",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "childToConfig",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumberChildren",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parentToChildren",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeChild", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setActive",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFundsFromChild",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CHILD_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeChildAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeParentAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childToConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentToChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundsFromChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "childAdded(address,address)": EventFragment;
    "childRemoved(address,address)": EventFragment;
    "coinWithdrawed(uint256)": EventFragment;
    "configChanged(bool,uint256,address)": EventFragment;
    "fundsAdded(address,uint256,address)": EventFragment;
    "fundsWithdrawn(address,uint256,address)": EventFragment;
    "moneyClaimed(address,uint256)": EventFragment;
    "parentChanged(address,address)": EventFragment;
    "tokenWithdrawed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "childAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "childRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "coinWithdrawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "configChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "fundsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "fundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "moneyClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "parentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenWithdrawed"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type childAddedEvent = TypedEvent<
  [string, string] & { parent: string; child: string }
>;

export type childRemovedEvent = TypedEvent<
  [string, string] & { parent: string; child: string }
>;

export type coinWithdrawedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type configChangedEvent = TypedEvent<
  [boolean, BigNumber, string] & {
    active: boolean;
    ceiling: BigNumber;
    child: string;
  }
>;

export type fundsAddedEvent = TypedEvent<
  [string, BigNumber, string] & {
    parent: string;
    amount: BigNumber;
    child: string;
  }
>;

export type fundsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string] & {
    parent: string;
    amount: BigNumber;
    child: string;
  }
>;

export type moneyClaimedEvent = TypedEvent<
  [string, BigNumber] & { child: string; amount: BigNumber }
>;

export type parentChangedEvent = TypedEvent<
  [string, string] & { oldAddr: string; newAddr: string }
>;

export type tokenWithdrawedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export class PocketFaucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PocketFaucetInterface;

  functions: {
    CHILD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PARENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addChild(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFunds(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeChildAddress(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeConfig(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeParentAddr(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childToConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        active: boolean;
        balance: BigNumber;
        ceiling: BigNumber;
        lastClaim: BigNumber;
        periodicity: BigNumber;
        parent: string;
      }
    >;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumberChildren(
      parent: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parentToChildren(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeChild(
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActive(
      active: boolean,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFundsFromChild(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHILD_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PARENT_ROLE(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

  addChild(
    ceiling: BigNumberish,
    periodicity: BigNumberish,
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFunds(
    amount: BigNumberish,
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeChildAddress(
    oldAddr: string,
    newAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeConfig(
    ceiling: BigNumberish,
    periodicity: BigNumberish,
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeParentAddr(
    oldAddr: string,
    newAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childToConfig(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      active: boolean;
      balance: BigNumber;
      ceiling: BigNumber;
      lastClaim: BigNumber;
      periodicity: BigNumber;
      parent: string;
    }
  >;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumberChildren(
    parent: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parentToChildren(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeChild(
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActive(
    active: boolean,
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawCoin(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFundsFromChild(
    amount: BigNumberish,
    child: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHILD_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PARENT_ROLE(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

    addChild(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFunds(
      amount: BigNumberish,
      child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeChildAddress(
      oldAddr: string,
      newAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeConfig(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeParentAddr(
      oldAddr: string,
      newAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    childToConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        active: boolean;
        balance: BigNumber;
        ceiling: BigNumber;
        lastClaim: BigNumber;
        periodicity: BigNumber;
        parent: string;
      }
    >;

    claim(overrides?: CallOverrides): Promise<void>;

    getNumberChildren(
      parent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(token: string, overrides?: CallOverrides): Promise<void>;

    parentToChildren(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeChild(child: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setActive(
      active: boolean,
      child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCoin(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFundsFromChild(
      amount: BigNumberish,
      child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "childAdded(address,address)"(
      parent?: string | null,
      child?: string | null
    ): TypedEventFilter<[string, string], { parent: string; child: string }>;

    childAdded(
      parent?: string | null,
      child?: string | null
    ): TypedEventFilter<[string, string], { parent: string; child: string }>;

    "childRemoved(address,address)"(
      parent?: string | null,
      child?: string | null
    ): TypedEventFilter<[string, string], { parent: string; child: string }>;

    childRemoved(
      parent?: string | null,
      child?: string | null
    ): TypedEventFilter<[string, string], { parent: string; child: string }>;

    "coinWithdrawed(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    coinWithdrawed(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "configChanged(bool,uint256,address)"(
      active?: null,
      ceiling?: null,
      child?: string | null
    ): TypedEventFilter<
      [boolean, BigNumber, string],
      { active: boolean; ceiling: BigNumber; child: string }
    >;

    configChanged(
      active?: null,
      ceiling?: null,
      child?: string | null
    ): TypedEventFilter<
      [boolean, BigNumber, string],
      { active: boolean; ceiling: BigNumber; child: string }
    >;

    "fundsAdded(address,uint256,address)"(
      parent?: string | null,
      amount?: null,
      child?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { parent: string; amount: BigNumber; child: string }
    >;

    fundsAdded(
      parent?: string | null,
      amount?: null,
      child?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { parent: string; amount: BigNumber; child: string }
    >;

    "fundsWithdrawn(address,uint256,address)"(
      parent?: string | null,
      amount?: null,
      child?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { parent: string; amount: BigNumber; child: string }
    >;

    fundsWithdrawn(
      parent?: string | null,
      amount?: null,
      child?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { parent: string; amount: BigNumber; child: string }
    >;

    "moneyClaimed(address,uint256)"(
      child?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { child: string; amount: BigNumber }
    >;

    moneyClaimed(
      child?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { child: string; amount: BigNumber }
    >;

    "parentChanged(address,address)"(
      oldAddr?: string | null,
      newAddr?: null
    ): TypedEventFilter<[string, string], { oldAddr: string; newAddr: string }>;

    parentChanged(
      oldAddr?: string | null,
      newAddr?: null
    ): TypedEventFilter<[string, string], { oldAddr: string; newAddr: string }>;

    "tokenWithdrawed(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    tokenWithdrawed(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    CHILD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PARENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addChild(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFunds(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeChildAddress(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeConfig(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeParentAddr(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childToConfig(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumberChildren(
      parent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parentToChildren(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeChild(
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActive(
      active: boolean,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFundsFromChild(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHILD_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PARENT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addChild(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFunds(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeChildAddress(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeConfig(
      ceiling: BigNumberish,
      periodicity: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeParentAddr(
      oldAddr: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childToConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumberChildren(
      parent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parentToChildren(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeChild(
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActive(
      active: boolean,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFundsFromChild(
      amount: BigNumberish,
      child: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
